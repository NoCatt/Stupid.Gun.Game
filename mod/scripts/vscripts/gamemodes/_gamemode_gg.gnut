global function GamemodeGG_Init

array<string> playerHSNames = [] //players that have HouseFlies enabled
table<string, int> playerHSKills
array<string> adminNames = ["admin1", "admin2"] // admins
bool hsOn
int HSLimit = 20

void function GamemodeGG_Init()
{
	//house flies commands
	AddClientCommandCallback("hs", EnablehsCMD); // this command toggles hs to all or a certain players syntax: hs <name/all> 0/1 

	SetSpawnpointGamemodeOverride( FFA )

	SetShouldUseRoundWinningKillReplay( true )
	ClassicMP_ForceDisableEpilogue( true )
	SetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period
	SetWeaponDropsEnabled( false )
	Riff_ForceTitanAvailability( eTitanAvailability.Never )
	Riff_ForceBoostAvailability( eBoostAvailability.Disabled )

	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerKilled( OnPlayerKilled )
	AddCallback_OnClientDisconnected(OnPlayerDisconnected)

	AddCallback_GameStateEnter( eGameState.WinnerDetermined, OnWinnerDetermined )

	AddCallback_GGEarnMeterFull( OnGGEarnMeterFilled )

    // CUSTOM
    AddCallback_OnClientConnected(OnClientConnected)

	if( RandomInt( 100 ) == 1 ) // easter egg (enables house flies for everyone)
	{
		hsOn = true;
		foreach( entity player in GetPlayerArray() )
			playerHSNames.append( player.GetPlayerName() )
	}
	else
	{
		hsOn = false;
	}
	try
	{
		if ( GetCurrentPlaylistVarInt( "scorelimit", GetGunGameWeapons().len() ) != GetGunGameWeapons().len() )
			SetPlaylistVarOverride( "scorelimit", GetGunGameWeapons().len().tostring() )
	}
	catch ( ex ) {}
}

bool function EnablehsCMD( entity player, array < string > args )
{
    #if SERVER
	string playerName = player.GetPlayerName()
	if( adminNames.find(playerName) != -1) // checks if player is an admin
	{
		if(args.len() == 0) // if only hs entered
			{
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				return true
			}
		switch ( args[0] )
		{
			// if has all entered
			case("all"):
				if(args[1] == "1")
				{
					hsOn = true;
					foreach( entity pl in GetPlayerArray() )
					{
						if( playerHSNames.find( pl.GetPlayerName() ) == -1 )
						{
							playerHSNames.append( pl.GetPlayerName() )
							UpdateLoadout(pl)
						}
					}
				}
				else if(args[1] == "0")
					{
						hsOn = false;
						playerHSNames.clear()
						foreach( entity pl in GetPlayerArray() )
							UpdateLoadout(pl)
					}
				// if something that isnt 1 or 0 was entered
				else
					SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			// if a 0 was entered in stead of a player's name
			case("0"): 
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			 // if a 1 was entered in stead of a player's name
			case("1"):
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			default:
				bool found = false
				int playerIndex
				// checks if the player entered is connected 
				for( int i = 0 ; i < GetPlayerArray().len() ; i++ )
				{
					entity pl = GetPlayerArray()[i]
					if( pl.GetPlayerName() == args[0] )
					{
						found = true
						playerIndex = i
					}
				}
				if( found )
					{
						if( args[1] == "0" )
						{
							if( playerHSNames.find(args[0]) != -1 )
							{
								playerHSNames.remove( playerHSNames.find(args[0]) )
								UpdateLoadout( GetPlayerArray()[playerIndex] )
							}
						}
						else if( args[1] == "1")
						{
							if( playerHSNames.find(args[0]) == -1 )
							{
								playerHSNames.append( args[0] )
								UpdateLoadout( GetPlayerArray()[playerIndex] )
							}
						}
						else
							SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
					}
				else
					SendHudMessage(player, "wrong syntax or player not found", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;
		}
	}
    #endif
    return true
}

void function OnPlayerDisconnected(entity player)
{
	// this prevents a new player to get someone who's left's score
	AddTeamScore( player.GetTeam(), -GameRules_GetTeamScore( player.GetTeam() ))
}

void function OnPlayerRespawned( entity player )
{
    StatusEffect_AddTimed( player, eStatusEffect.speed_boost, 0.4, 4.25, 0.25)
	UpdateLoadout( player )
	thread OnPlayerRespawned_Threaded( player )
}

void function OnPlayerRespawned_Threaded( entity player )
{
	// bit of a hack, need to rework earnmeter code to have better support for completely disabling it
	// rn though this just waits for earnmeter code to set the mode before we set it back
	WaitFrame()
	if ( IsValid( player ) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{		
	if ( !victim.IsPlayer() || !attacker.IsPlayer() || GetGameState() != eGameState.Playing )
		return

	if ( attacker == victim ) // suicide
	{
		string message = victim.GetPlayerName() + " committed suicide."
		foreach ( entity player in GetPlayerArray() )
			SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )

		DeRank( victim )
	}
	else
	{
        // Heal & stim attacker after kill
        if (IsAlive(attacker)) {
            attacker.SetHealth(attacker.GetMaxHealth())
            StatusEffect_AddTimed( attacker, eStatusEffect.speed_boost, 0.4, 4.25, 0.25)
        }

		if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) != eDamageSourceId.melee_pilot_emptyhanded )
		{
			float percentageReward = GetCurrentPlaylistVarFloat( "gg_kill_reward", 1.0 )
			string scoreEvent = "KillPilot"

			if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.human_execution )
			{
				string message = victim.GetPlayerName() + " got executed."
				foreach ( entity player in GetPlayerArray() )
					SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )

				DeRank( victim )

				percentageReward = GetCurrentPlaylistVarFloat( "gg_execution_reward", 1.0 )
				scoreEvent = "Execution"
			}
			if (GameRules_GetTeamScore( attacker.GetTeam() ) == GetGunGameWeapons().len()-1 && DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_thermite_grenade){
				percentageReward = 0.0
			}			
			// adds the attacker to the hs array if they've reached the final weapon
			if( GameRules_GetTeamScore( attacker.GetTeam() ) == GetGunGameWeapons().len()-2 )
			{
				playerHSNames.append( attacker.GetPlayerName() )
				playerHSKills[attacker.GetPlayerName()] <- 0
			}
			Reward( attacker, victim, scoreEvent, percentageReward )
			
			
		}else{
			if( playerHSNames.find( attacker.GetPlayerName() ) != -1){
				playerHSKills[attacker.GetPlayerName()] ++
				if( playerHSKills[attacker.GetPlayerName()] >= HSLimit){
					playerHSNames.remove(playerHSNames.find(attacker.GetPlayerName))
					Chat_ServerPrivateMessage(attacker, "Bruv you meleeported enough",false)
				}
				else if(playerHSKills[attacker.GetPlayerName()] >= 10).{
					Chat_ServerPrivateMessage(attacker, "Cmon dude if you meleeport too much I will take it away", false)
				}
			}
			
		}
	}

	table<int, bool> alreadyAssisted
	foreach( DamageHistoryStruct attackerInfo in victim.e.recentDamageHistory )
	{
        if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == victim )
                    continue

		if( attackerInfo.attacker != attacker && !( attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ) )
		{
			if ( attackerInfo.damageSourceId != eDamageSourceId.melee_pilot_emptyhanded ) {
				alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true

				Reward( attackerInfo.attacker, victim, "PilotAssist", GetCurrentPlaylistVarFloat( "gg_assist_reward", 0.0 ) )
			}
		}
	}
	if( GameRules_GetTeamScore(attacker.GetTeam()) > GetGunGameWeapons().len())
		SetRoundWinningKillReplayAttacker(attacker)
	
}

void function Reward( entity player, entity victim, string scoreEvent, float percentageReward )
{
	percentageReward = clamp(percentageReward, 0.0, 1.0)
	Sv_GGEarnMeter_AddPercentage( player, percentageReward )
	Remote_CallFunction_NonReplay( player, "ServerCallback_ScoreEvent", GetScoreEvent(scoreEvent).eventId, 0, eEventDisplayType.MEDAL, victim.GetEncodedEHandle(), 0.0, percentageReward)
}

void function DeRank( entity player )
{
	Sv_GGEarnMeter_SetPercentage( player, 0.0 )

	if ( GameRules_GetTeamScore( player.GetTeam() ) != 0 )
	{
		AddTeamScore( player.GetTeam(), -1 ) // get absolutely fucking destroyed lol
		player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, -1 )
		UpdateLoadout( player )
	}
}

bool function OnGGEarnMeterFilled( entity player )
{
	AddTeamScore( player.GetTeam(), 1 )
	player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, 1 )
	UpdateLoadout( player )

	int currentScore = GameRules_GetTeamScore( player.GetTeam() )
	int maxScore = GetGunGameWeapons().len()

	return currentScore >= maxScore
}

void function UpdateLoadout( entity player )
{
	// todo: honestly, this should be reworked to use PilotLoadoutDefs instead of directly modifying weapons and shit

	int currentWeaponIndex = GameRules_GetTeamScore( player.GetTeam() )
	array<GunGameWeapon> weapons = GetGunGameWeapons()

	if ( currentWeaponIndex >= weapons.len() )
		currentWeaponIndex = weapons.len() - 1

	if ( currentWeaponIndex > weapons.len() - 3 ) // play end of game music for special or last few weapons
		PlayMusicToAll( eMusicPieceID.LEVEL_LAST_MINUTE ) // this *shouldn't* overlap if done multiple times

	GunGameWeapon weapon = weapons[ currentWeaponIndex ]

	foreach ( entity weapon in player.GetMainWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )

	foreach ( entity weapon in player.GetOffhandWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )

	if ( weapon.offhandSlot != -1)
	{
		player.GiveOffhandWeapon( weapon.weapon, weapon.offhandSlot, weapon.mods )

		if( playerHSNames.find( player.GetPlayerName() ) == -1 )
			player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE, [ "allow_as_primary" ] )
		else
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, [ "allow_as_primary" ] )
			
		player.SetActiveWeaponByName( player.GetOffhandWeapon( OFFHAND_MELEE ).GetWeaponClassName() ) // Let the player use the melee in the primary slot, and then force equip it. Effectively gives them an empty hand.
	}
    else
    {
        player.GiveWeapon( weapon.weapon, weapon.mods )

        if( playerHSNames.find( player.GetPlayerName() ) == -1 )
            player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE )
        else
            player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE )
    }

    // Phaseshift 
    player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_LEFT )
    // Firestar
    if(weapon.offhandSlot==0){
  	player.GiveOffhandWeapon("mp_weapon_thermite_grenade", OFFHAND_INVENTORY)

	}else{
	  player.GiveOffhandWeapon("mp_weapon_thermite_grenade", OFFHAND_RIGHT)
	}
	
}

void function OnWinnerDetermined()
{
	SetRespawnsEnabled( false )
	SetKillcamsEnabled( false )

	playerHSNames.clear()
}

// CUSTOM
void function OnClientConnected(entity player) {
    printt("[GUN GAME] OnClientConnected", player, "team", player.GetTeam())
	if(hsOn) // if house flies is enabled add player to hsplayers array
		playerHSNames.append( player.GetPlayerName() )
}
